#!/bin/zsh
#
#本次实验实现了parser一个表达式，还有if-else语句
#实验比较有趣的是识别表达式的算法，比较实用的是画出一个树,最没用的是if-else语句的识别
#
#
#-----------------操作说明：
#在shell下，且在本目录下，执行README.sh文件(本文件),得到main文件
#由于很多原因不能在vs下直接执行
#
#--------------------------------------------------------------------------
g++ -std=c++11 -c lib.cpp
g++ -std=c++11 -c parser.cpp

g++ -std=c++11 lib.o parser.o -o main

rm -f lib.o parser.o

#---------------------------具体效果图-------------------------------------
#
#---------->cat test.txt 
#
#   n = 1 + 6 * (7 + 8 ) + n ;

#   if n = 0 
#   then var = v1 + v2
#   else var = v1 * v2 ;
#

##---------->执行./main 
##
##[31mI have parsered a Expression, next is .......[0m
##
##
##                                _______________________________=______________________________
##                               /                                                              \
##                               n                                                _______________+______________
##                                                                               /                              \
##                                                                        _______+______                         n      
##                                                                       /              \                                
##                                                                       1            ___*__                                
##                                                                                   /      \                                
##                                                                                   6      _+                                
##                                                                                         /  \                                
##                                                                                         7   8                                
##[31m......END.......[0m
##
##
##[31m.....IF-ELSE statement start......[0m
##
##[34mif
##	[0m
##       ___=__
##      /      \
##      n       0
##[34mthen
##	[0m
##           _______=______
##          /              \
##        var            ___+__
##                      /      \
##                     v1      v2
##[34melse
##	[0m
##           _______=______
##          /              \
##        var            ___*__
##                      /      \
##                     v1      v2
##[31m.....END......[0m
##
##
